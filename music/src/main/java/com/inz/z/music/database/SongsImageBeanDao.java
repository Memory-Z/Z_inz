package com.inz.z.music.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "songs_image".
*/
public class SongsImageBeanDao extends AbstractDao<SongsImageBean, Long> {

    public static final String TABLENAME = "songs_image";

    /**
     * Properties of entity SongsImageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ImageId = new Property(1, String.class, "imageId", false, "IMAGE_ID");
        public final static Property SongsId = new Property(2, String.class, "songsId", false, "SONGS_ID");
        public final static Property ImageSrc = new Property(3, String.class, "imageSrc", false, "IMAGE_SRC");
        public final static Property ImageUrl = new Property(4, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property ImageIsDownload = new Property(5, boolean.class, "imageIsDownload", false, "IMAGE_IS_DOWNLOAD");
        public final static Property ImageWidth = new Property(6, int.class, "imageWidth", false, "IMAGE_WIDTH");
        public final static Property ImageHeight = new Property(7, int.class, "imageHeight", false, "IMAGE_HEIGHT");
        public final static Property ImageSize = new Property(8, long.class, "imageSize", false, "IMAGE_SIZE");
        public final static Property ImageType = new Property(9, String.class, "imageType", false, "IMAGE_TYPE");
        public final static Property Comment = new Property(10, String.class, "comment", false, "COMMENT");
    }

    private DaoSession daoSession;

    private Query<SongsImageBean> itemSongsBean_ImageBeanListQuery;

    public SongsImageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SongsImageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"songs_image\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IMAGE_ID\" TEXT," + // 1: imageId
                "\"SONGS_ID\" TEXT NOT NULL UNIQUE ," + // 2: songsId
                "\"IMAGE_SRC\" TEXT," + // 3: imageSrc
                "\"IMAGE_URL\" TEXT," + // 4: imageUrl
                "\"IMAGE_IS_DOWNLOAD\" INTEGER NOT NULL ," + // 5: imageIsDownload
                "\"IMAGE_WIDTH\" INTEGER NOT NULL ," + // 6: imageWidth
                "\"IMAGE_HEIGHT\" INTEGER NOT NULL ," + // 7: imageHeight
                "\"IMAGE_SIZE\" INTEGER NOT NULL ," + // 8: imageSize
                "\"IMAGE_TYPE\" TEXT," + // 9: imageType
                "\"COMMENT\" TEXT);"); // 10: comment
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"songs_image\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SongsImageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imageId = entity.getImageId();
        if (imageId != null) {
            stmt.bindString(2, imageId);
        }
        stmt.bindString(3, entity.getSongsId());
 
        String imageSrc = entity.getImageSrc();
        if (imageSrc != null) {
            stmt.bindString(4, imageSrc);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(5, imageUrl);
        }
        stmt.bindLong(6, entity.getImageIsDownload() ? 1L: 0L);
        stmt.bindLong(7, entity.getImageWidth());
        stmt.bindLong(8, entity.getImageHeight());
        stmt.bindLong(9, entity.getImageSize());
 
        String imageType = entity.getImageType();
        if (imageType != null) {
            stmt.bindString(10, imageType);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(11, comment);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SongsImageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imageId = entity.getImageId();
        if (imageId != null) {
            stmt.bindString(2, imageId);
        }
        stmt.bindString(3, entity.getSongsId());
 
        String imageSrc = entity.getImageSrc();
        if (imageSrc != null) {
            stmt.bindString(4, imageSrc);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(5, imageUrl);
        }
        stmt.bindLong(6, entity.getImageIsDownload() ? 1L: 0L);
        stmt.bindLong(7, entity.getImageWidth());
        stmt.bindLong(8, entity.getImageHeight());
        stmt.bindLong(9, entity.getImageSize());
 
        String imageType = entity.getImageType();
        if (imageType != null) {
            stmt.bindString(10, imageType);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(11, comment);
        }
    }

    @Override
    protected final void attachEntity(SongsImageBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SongsImageBean readEntity(Cursor cursor, int offset) {
        SongsImageBean entity = new SongsImageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imageId
            cursor.getString(offset + 2), // songsId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imageSrc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageUrl
            cursor.getShort(offset + 5) != 0, // imageIsDownload
            cursor.getInt(offset + 6), // imageWidth
            cursor.getInt(offset + 7), // imageHeight
            cursor.getLong(offset + 8), // imageSize
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // imageType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // comment
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SongsImageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSongsId(cursor.getString(offset + 2));
        entity.setImageSrc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImageIsDownload(cursor.getShort(offset + 5) != 0);
        entity.setImageWidth(cursor.getInt(offset + 6));
        entity.setImageHeight(cursor.getInt(offset + 7));
        entity.setImageSize(cursor.getLong(offset + 8));
        entity.setImageType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setComment(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SongsImageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SongsImageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SongsImageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "imageBeanList" to-many relationship of ItemSongsBean. */
    public List<SongsImageBean> _queryItemSongsBean_ImageBeanList(String imageId) {
        synchronized (this) {
            if (itemSongsBean_ImageBeanListQuery == null) {
                QueryBuilder<SongsImageBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ImageId.eq(null));
                itemSongsBean_ImageBeanListQuery = queryBuilder.build();
            }
        }
        Query<SongsImageBean> query = itemSongsBean_ImageBeanListQuery.forCurrentThread();
        query.setParameter(0, imageId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getItemSongsBeanDao().getAllColumns());
            builder.append(" FROM songs_image T");
            builder.append(" LEFT JOIN music_song T0 ON T.\"SONGS_ID\"=T0.\"SONGS_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected SongsImageBean loadCurrentDeep(Cursor cursor, boolean lock) {
        SongsImageBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ItemSongsBean songsBean = loadCurrentOther(daoSession.getItemSongsBeanDao(), cursor, offset);
         if(songsBean != null) {
            entity.setSongsBean(songsBean);
        }

        return entity;    
    }

    public SongsImageBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<SongsImageBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<SongsImageBean> list = new ArrayList<SongsImageBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<SongsImageBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<SongsImageBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
