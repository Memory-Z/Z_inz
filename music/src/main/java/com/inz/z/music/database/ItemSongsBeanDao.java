package com.inz.z.music.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.inz.z.music.view.adapter.ItemSongsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "music_song".
*/
public class ItemSongsBeanDao extends AbstractDao<ItemSongsBean, String> {

    public static final String TABLENAME = "music_song";

    /**
     * Properties of entity ItemSongsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "SONGS_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Detail = new Property(2, String.class, "detail", false, "DETAIL");
        public final static Property IsDownload = new Property(3, boolean.class, "isDownload", false, "IS_DOWNLOAD");
        public final static Property IsVip = new Property(4, boolean.class, "isVip", false, "IS_VIP");
        public final static Property HaveVideo = new Property(5, boolean.class, "haveVideo", false, "HAVE_VIDEO");
        public final static Property HaveHQ = new Property(6, boolean.class, "haveHQ", false, "HAVE_HQ");
        public final static Property HaveSQ = new Property(7, boolean.class, "haveSQ", false, "HAVE_SQ");
        public final static Property IsOnly = new Property(8, boolean.class, "isOnly", false, "IS_ONLY");
        public final static Property PlayNum = new Property(9, long.class, "playNum", false, "PLAY_NUM");
        public final static Property IsChecked = new Property(10, boolean.class, "isChecked", false, "IS_CHECKED");
    }

    private DaoSession daoSession;


    public ItemSongsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ItemSongsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"music_song\" (" + //
                "\"SONGS_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DETAIL\" TEXT," + // 2: detail
                "\"IS_DOWNLOAD\" INTEGER NOT NULL ," + // 3: isDownload
                "\"IS_VIP\" INTEGER NOT NULL ," + // 4: isVip
                "\"HAVE_VIDEO\" INTEGER NOT NULL ," + // 5: haveVideo
                "\"HAVE_HQ\" INTEGER NOT NULL ," + // 6: haveHQ
                "\"HAVE_SQ\" INTEGER NOT NULL ," + // 7: haveSQ
                "\"IS_ONLY\" INTEGER NOT NULL ," + // 8: isOnly
                "\"PLAY_NUM\" INTEGER NOT NULL ," + // 9: playNum
                "\"IS_CHECKED\" INTEGER NOT NULL );"); // 10: isChecked
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_music_song_SONGS_ID ON \"music_song\"" +
                " (\"SONGS_ID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_music_song_TITLE ON \"music_song\"" +
                " (\"TITLE\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"music_song\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ItemSongsBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(3, detail);
        }
        stmt.bindLong(4, entity.getIsDownload() ? 1L: 0L);
        stmt.bindLong(5, entity.getIsVip() ? 1L: 0L);
        stmt.bindLong(6, entity.getHaveVideo() ? 1L: 0L);
        stmt.bindLong(7, entity.getHaveHQ() ? 1L: 0L);
        stmt.bindLong(8, entity.getHaveSQ() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsOnly() ? 1L: 0L);
        stmt.bindLong(10, entity.getPlayNum());
        stmt.bindLong(11, entity.getIsChecked() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ItemSongsBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(3, detail);
        }
        stmt.bindLong(4, entity.getIsDownload() ? 1L: 0L);
        stmt.bindLong(5, entity.getIsVip() ? 1L: 0L);
        stmt.bindLong(6, entity.getHaveVideo() ? 1L: 0L);
        stmt.bindLong(7, entity.getHaveHQ() ? 1L: 0L);
        stmt.bindLong(8, entity.getHaveSQ() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsOnly() ? 1L: 0L);
        stmt.bindLong(10, entity.getPlayNum());
        stmt.bindLong(11, entity.getIsChecked() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(ItemSongsBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ItemSongsBean readEntity(Cursor cursor, int offset) {
        ItemSongsBean entity = new ItemSongsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // detail
            cursor.getShort(offset + 3) != 0, // isDownload
            cursor.getShort(offset + 4) != 0, // isVip
            cursor.getShort(offset + 5) != 0, // haveVideo
            cursor.getShort(offset + 6) != 0, // haveHQ
            cursor.getShort(offset + 7) != 0, // haveSQ
            cursor.getShort(offset + 8) != 0, // isOnly
            cursor.getLong(offset + 9), // playNum
            cursor.getShort(offset + 10) != 0 // isChecked
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ItemSongsBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDetail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsDownload(cursor.getShort(offset + 3) != 0);
        entity.setIsVip(cursor.getShort(offset + 4) != 0);
        entity.setHaveVideo(cursor.getShort(offset + 5) != 0);
        entity.setHaveHQ(cursor.getShort(offset + 6) != 0);
        entity.setHaveSQ(cursor.getShort(offset + 7) != 0);
        entity.setIsOnly(cursor.getShort(offset + 8) != 0);
        entity.setPlayNum(cursor.getLong(offset + 9));
        entity.setIsChecked(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(ItemSongsBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ItemSongsBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ItemSongsBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
