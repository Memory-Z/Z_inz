package com.inz.z.music.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHOOSE_INTEREST_DB".
*/
public class ChooseInterestDbDao extends AbstractDao<ChooseInterestDb, Long> {

    public static final String TABLENAME = "CHOOSE_INTEREST_DB";

    /**
     * Properties of entity ChooseInterestDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChooseInterestId = new Property(1, String.class, "chooseInterestId", false, "CHOOSE_INTEREST_ID");
        public final static Property ChooseInterestName = new Property(2, String.class, "chooseInterestName", false, "CHOOSE_INTEREST_NAME");
        public final static Property ChooseInterestDetail = new Property(3, String.class, "chooseInterestDetail", false, "CHOOSE_INTEREST_DETAIL");
        public final static Property ChooseInterestSrc = new Property(4, String.class, "chooseInterestSrc", false, "CHOOSE_INTEREST_SRC");
        public final static Property IsChoose = new Property(5, Boolean.class, "isChoose", false, "IS_CHOOSE");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
        public final static Property CreateDate = new Property(7, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(8, java.util.Date.class, "updateDate", false, "UPDATE_DATE");
    }


    public ChooseInterestDbDao(DaoConfig config) {
        super(config);
    }
    
    public ChooseInterestDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHOOSE_INTEREST_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHOOSE_INTEREST_ID\" TEXT," + // 1: chooseInterestId
                "\"CHOOSE_INTEREST_NAME\" TEXT," + // 2: chooseInterestName
                "\"CHOOSE_INTEREST_DETAIL\" TEXT," + // 3: chooseInterestDetail
                "\"CHOOSE_INTEREST_SRC\" TEXT," + // 4: chooseInterestSrc
                "\"IS_CHOOSE\" INTEGER," + // 5: isChoose
                "\"REMARK\" TEXT," + // 6: remark
                "\"CREATE_DATE\" INTEGER," + // 7: createDate
                "\"UPDATE_DATE\" INTEGER);"); // 8: updateDate
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CHOOSE_INTEREST_DB_CHOOSE_INTEREST_NAME_IS_CHOOSE ON \"CHOOSE_INTEREST_DB\"" +
                " (\"CHOOSE_INTEREST_NAME\" ASC,\"IS_CHOOSE\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHOOSE_INTEREST_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChooseInterestDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String chooseInterestId = entity.getChooseInterestId();
        if (chooseInterestId != null) {
            stmt.bindString(2, chooseInterestId);
        }
 
        String chooseInterestName = entity.getChooseInterestName();
        if (chooseInterestName != null) {
            stmt.bindString(3, chooseInterestName);
        }
 
        String chooseInterestDetail = entity.getChooseInterestDetail();
        if (chooseInterestDetail != null) {
            stmt.bindString(4, chooseInterestDetail);
        }
 
        String chooseInterestSrc = entity.getChooseInterestSrc();
        if (chooseInterestSrc != null) {
            stmt.bindString(5, chooseInterestSrc);
        }
 
        Boolean isChoose = entity.getIsChoose();
        if (isChoose != null) {
            stmt.bindLong(6, isChoose ? 1L: 0L);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(8, createDate.getTime());
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(9, updateDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChooseInterestDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String chooseInterestId = entity.getChooseInterestId();
        if (chooseInterestId != null) {
            stmt.bindString(2, chooseInterestId);
        }
 
        String chooseInterestName = entity.getChooseInterestName();
        if (chooseInterestName != null) {
            stmt.bindString(3, chooseInterestName);
        }
 
        String chooseInterestDetail = entity.getChooseInterestDetail();
        if (chooseInterestDetail != null) {
            stmt.bindString(4, chooseInterestDetail);
        }
 
        String chooseInterestSrc = entity.getChooseInterestSrc();
        if (chooseInterestSrc != null) {
            stmt.bindString(5, chooseInterestSrc);
        }
 
        Boolean isChoose = entity.getIsChoose();
        if (isChoose != null) {
            stmt.bindLong(6, isChoose ? 1L: 0L);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(8, createDate.getTime());
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(9, updateDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChooseInterestDb readEntity(Cursor cursor, int offset) {
        ChooseInterestDb entity = new ChooseInterestDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chooseInterestId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chooseInterestName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chooseInterestDetail
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // chooseInterestSrc
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isChoose
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remark
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // createDate
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // updateDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChooseInterestDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChooseInterestId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChooseInterestName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChooseInterestDetail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChooseInterestSrc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsChoose(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setUpdateDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChooseInterestDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChooseInterestDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChooseInterestDb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
