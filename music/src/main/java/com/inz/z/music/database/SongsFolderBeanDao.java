package com.inz.z.music.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "songs_folder".
*/
public class SongsFolderBeanDao extends AbstractDao<SongsFolderBean, String> {

    public static final String TABLENAME = "songs_folder";

    /**
     * Properties of entity SongsFolderBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SongsFolderId = new Property(0, String.class, "songsFolderId", true, "SONGS_FOLDER_ID");
        public final static Property FolderName = new Property(1, String.class, "folderName", false, "FOLDER_NAME");
        public final static Property IsChecked = new Property(2, boolean.class, "isChecked", false, "IS_CHECKED");
    }

    private DaoSession daoSession;


    public SongsFolderBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SongsFolderBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"songs_folder\" (" + //
                "\"SONGS_FOLDER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: songsFolderId
                "\"FOLDER_NAME\" TEXT NOT NULL ," + // 1: folderName
                "\"IS_CHECKED\" INTEGER NOT NULL );"); // 2: isChecked
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"songs_folder\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SongsFolderBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSongsFolderId());
        stmt.bindString(2, entity.getFolderName());
        stmt.bindLong(3, entity.getIsChecked() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SongsFolderBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSongsFolderId());
        stmt.bindString(2, entity.getFolderName());
        stmt.bindLong(3, entity.getIsChecked() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(SongsFolderBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public SongsFolderBean readEntity(Cursor cursor, int offset) {
        SongsFolderBean entity = new SongsFolderBean( //
            cursor.getString(offset + 0), // songsFolderId
            cursor.getString(offset + 1), // folderName
            cursor.getShort(offset + 2) != 0 // isChecked
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SongsFolderBean entity, int offset) {
        entity.setSongsFolderId(cursor.getString(offset + 0));
        entity.setFolderName(cursor.getString(offset + 1));
        entity.setIsChecked(cursor.getShort(offset + 2) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(SongsFolderBean entity, long rowId) {
        return entity.getSongsFolderId();
    }
    
    @Override
    public String getKey(SongsFolderBean entity) {
        if(entity != null) {
            return entity.getSongsFolderId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SongsFolderBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
