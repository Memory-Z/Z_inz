package com.inz.z.note_book.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.inz.z.note_book.bean.NoteInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "note_info".
*/
public class NoteInfoDao extends AbstractDao<NoteInfo, String> {

    public static final String TABLENAME = "note_info";

    /**
     * Properties of entity NoteInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NoteInfoId = new Property(0, String.class, "noteInfoId", true, "NOTE_INFO_ID");
        public final static Property NoteTitle = new Property(1, String.class, "noteTitle", false, "NOTE_TITLE");
        public final static Property NoteContent = new Property(2, String.class, "noteContent", false, "NOTE_CONTENT");
        public final static Property CreateDate = new Property(3, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(4, java.util.Date.class, "updateDate", false, "UPDATE_DATE");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
    }


    public NoteInfoDao(DaoConfig config) {
        super(config);
    }
    
    public NoteInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"note_info\" (" + //
                "\"NOTE_INFO_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: noteInfoId
                "\"NOTE_TITLE\" TEXT," + // 1: noteTitle
                "\"NOTE_CONTENT\" TEXT," + // 2: noteContent
                "\"CREATE_DATE\" INTEGER," + // 3: createDate
                "\"UPDATE_DATE\" INTEGER," + // 4: updateDate
                "\"STATUS\" INTEGER NOT NULL );"); // 5: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"note_info\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NoteInfo entity) {
        stmt.clearBindings();
 
        String noteInfoId = entity.getNoteInfoId();
        if (noteInfoId != null) {
            stmt.bindString(1, noteInfoId);
        }
 
        String noteTitle = entity.getNoteTitle();
        if (noteTitle != null) {
            stmt.bindString(2, noteTitle);
        }
 
        String noteContent = entity.getNoteContent();
        if (noteContent != null) {
            stmt.bindString(3, noteContent);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(4, createDate.getTime());
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(5, updateDate.getTime());
        }
        stmt.bindLong(6, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NoteInfo entity) {
        stmt.clearBindings();
 
        String noteInfoId = entity.getNoteInfoId();
        if (noteInfoId != null) {
            stmt.bindString(1, noteInfoId);
        }
 
        String noteTitle = entity.getNoteTitle();
        if (noteTitle != null) {
            stmt.bindString(2, noteTitle);
        }
 
        String noteContent = entity.getNoteContent();
        if (noteContent != null) {
            stmt.bindString(3, noteContent);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(4, createDate.getTime());
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(5, updateDate.getTime());
        }
        stmt.bindLong(6, entity.getStatus());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NoteInfo readEntity(Cursor cursor, int offset) {
        NoteInfo entity = new NoteInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // noteInfoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // noteTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // noteContent
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // createDate
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // updateDate
            cursor.getInt(offset + 5) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NoteInfo entity, int offset) {
        entity.setNoteInfoId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNoteTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNoteContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setUpdateDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setStatus(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NoteInfo entity, long rowId) {
        return entity.getNoteInfoId();
    }
    
    @Override
    public String getKey(NoteInfo entity) {
        if(entity != null) {
            return entity.getNoteInfoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NoteInfo entity) {
        return entity.getNoteInfoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
