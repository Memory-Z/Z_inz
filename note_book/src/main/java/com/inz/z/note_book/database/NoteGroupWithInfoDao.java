package com.inz.z.note_book.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.inz.z.note_book.bean.NoteGroupWithInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "rel_note_group_info".
*/
public class NoteGroupWithInfoDao extends AbstractDao<NoteGroupWithInfo, String> {

    public static final String TABLENAME = "rel_note_group_info";

    /**
     * Properties of entity NoteGroupWithInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NoteGroupWithInfoId = new Property(0, String.class, "noteGroupWithInfoId", true, "NOTE_GROUP_WITH_INFO_ID");
        public final static Property GroupId = new Property(1, String.class, "groupId", false, "GROUP_ID");
        public final static Property InfoId = new Property(2, String.class, "infoId", false, "INFO_ID");
    }


    public NoteGroupWithInfoDao(DaoConfig config) {
        super(config);
    }
    
    public NoteGroupWithInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"rel_note_group_info\" (" + //
                "\"NOTE_GROUP_WITH_INFO_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: noteGroupWithInfoId
                "\"GROUP_ID\" TEXT," + // 1: groupId
                "\"INFO_ID\" TEXT);"); // 2: infoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"rel_note_group_info\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NoteGroupWithInfo entity) {
        stmt.clearBindings();
 
        String noteGroupWithInfoId = entity.getNoteGroupWithInfoId();
        if (noteGroupWithInfoId != null) {
            stmt.bindString(1, noteGroupWithInfoId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(2, groupId);
        }
 
        String infoId = entity.getInfoId();
        if (infoId != null) {
            stmt.bindString(3, infoId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NoteGroupWithInfo entity) {
        stmt.clearBindings();
 
        String noteGroupWithInfoId = entity.getNoteGroupWithInfoId();
        if (noteGroupWithInfoId != null) {
            stmt.bindString(1, noteGroupWithInfoId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(2, groupId);
        }
 
        String infoId = entity.getInfoId();
        if (infoId != null) {
            stmt.bindString(3, infoId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NoteGroupWithInfo readEntity(Cursor cursor, int offset) {
        NoteGroupWithInfo entity = new NoteGroupWithInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // noteGroupWithInfoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // infoId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NoteGroupWithInfo entity, int offset) {
        entity.setNoteGroupWithInfoId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGroupId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInfoId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NoteGroupWithInfo entity, long rowId) {
        return entity.getNoteGroupWithInfoId();
    }
    
    @Override
    public String getKey(NoteGroupWithInfo entity) {
        if(entity != null) {
            return entity.getNoteGroupWithInfoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NoteGroupWithInfo entity) {
        return entity.getNoteGroupWithInfoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
