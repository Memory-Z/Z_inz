package com.inz.z.note_book.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.inz.z.note_book.bean.TaskInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "task_info".
*/
public class TaskInfoDao extends AbstractDao<TaskInfo, String> {

    public static final String TABLENAME = "task_info";

    /**
     * Properties of entity TaskInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TaskId = new Property(0, String.class, "taskId", true, "TASK_ID");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property TaskDescribe = new Property(2, String.class, "taskDescribe", false, "TASK_DESCRIBE");
        public final static Property HaveFile = new Property(3, int.class, "haveFile", false, "HAVE_FILE");
        public final static Property Remake = new Property(4, String.class, "remake", false, "REMAKE");
        public final static Property CreateTime = new Property(5, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(6, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
    }


    public TaskInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TaskInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"task_info\" (" + //
                "\"TASK_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: taskId
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"TASK_DESCRIBE\" TEXT," + // 2: taskDescribe
                "\"HAVE_FILE\" INTEGER NOT NULL ," + // 3: haveFile
                "\"REMAKE\" TEXT," + // 4: remake
                "\"CREATE_TIME\" INTEGER," + // 5: createTime
                "\"UPDATE_TIME\" INTEGER);"); // 6: updateTime
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_task_info_TASK_ID ON \"task_info\"" +
                " (\"TASK_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"task_info\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskInfo entity) {
        stmt.clearBindings();
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(1, taskId);
        }
        stmt.bindLong(2, entity.getType());
 
        String taskDescribe = entity.getTaskDescribe();
        if (taskDescribe != null) {
            stmt.bindString(3, taskDescribe);
        }
        stmt.bindLong(4, entity.getHaveFile());
 
        String remake = entity.getRemake();
        if (remake != null) {
            stmt.bindString(5, remake);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime.getTime());
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(7, updateTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskInfo entity) {
        stmt.clearBindings();
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(1, taskId);
        }
        stmt.bindLong(2, entity.getType());
 
        String taskDescribe = entity.getTaskDescribe();
        if (taskDescribe != null) {
            stmt.bindString(3, taskDescribe);
        }
        stmt.bindLong(4, entity.getHaveFile());
 
        String remake = entity.getRemake();
        if (remake != null) {
            stmt.bindString(5, remake);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime.getTime());
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(7, updateTime.getTime());
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TaskInfo readEntity(Cursor cursor, int offset) {
        TaskInfo entity = new TaskInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // taskId
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // taskDescribe
            cursor.getInt(offset + 3), // haveFile
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remake
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // createTime
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskInfo entity, int offset) {
        entity.setTaskId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setTaskDescribe(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHaveFile(cursor.getInt(offset + 3));
        entity.setRemake(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUpdateTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TaskInfo entity, long rowId) {
        return entity.getTaskId();
    }
    
    @Override
    public String getKey(TaskInfo entity) {
        if(entity != null) {
            return entity.getTaskId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskInfo entity) {
        return entity.getTaskId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
