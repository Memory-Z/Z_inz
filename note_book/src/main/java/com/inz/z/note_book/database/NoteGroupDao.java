package com.inz.z.note_book.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.inz.z.note_book.bean.NoteGroup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "note_group".
*/
public class NoteGroupDao extends AbstractDao<NoteGroup, String> {

    public static final String TABLENAME = "note_group";

    /**
     * Properties of entity NoteGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NoteGroupId = new Property(0, String.class, "noteGroupId", true, "NOTE_GROUP_ID");
        public final static Property GroupName = new Property(1, String.class, "groupName", false, "GROUP_NAME");
        public final static Property Priority = new Property(2, int.class, "priority", false, "PRIORITY");
        public final static Property IsCollectValue = new Property(3, int.class, "isCollectValue", false, "IS_COLLECT_VALUE");
        public final static Property Order = new Property(4, int.class, "order", false, "ORDER");
        public final static Property CreateDate = new Property(5, String.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(6, String.class, "updateDate", false, "UPDATE_DATE");
    }

    private DaoSession daoSession;


    public NoteGroupDao(DaoConfig config) {
        super(config);
    }
    
    public NoteGroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"note_group\" (" + //
                "\"NOTE_GROUP_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: noteGroupId
                "\"GROUP_NAME\" TEXT," + // 1: groupName
                "\"PRIORITY\" INTEGER NOT NULL ," + // 2: priority
                "\"IS_COLLECT_VALUE\" INTEGER NOT NULL ," + // 3: isCollectValue
                "\"ORDER\" INTEGER NOT NULL ," + // 4: order
                "\"CREATE_DATE\" TEXT," + // 5: createDate
                "\"UPDATE_DATE\" TEXT);"); // 6: updateDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"note_group\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NoteGroup entity) {
        stmt.clearBindings();
 
        String noteGroupId = entity.getNoteGroupId();
        if (noteGroupId != null) {
            stmt.bindString(1, noteGroupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(2, groupName);
        }
        stmt.bindLong(3, entity.getPriority());
        stmt.bindLong(4, entity.getIsCollectValue());
        stmt.bindLong(5, entity.getOrder());
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(7, updateDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NoteGroup entity) {
        stmt.clearBindings();
 
        String noteGroupId = entity.getNoteGroupId();
        if (noteGroupId != null) {
            stmt.bindString(1, noteGroupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(2, groupName);
        }
        stmt.bindLong(3, entity.getPriority());
        stmt.bindLong(4, entity.getIsCollectValue());
        stmt.bindLong(5, entity.getOrder());
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(7, updateDate);
        }
    }

    @Override
    protected final void attachEntity(NoteGroup entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NoteGroup readEntity(Cursor cursor, int offset) {
        NoteGroup entity = new NoteGroup( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // noteGroupId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupName
            cursor.getInt(offset + 2), // priority
            cursor.getInt(offset + 3), // isCollectValue
            cursor.getInt(offset + 4), // order
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // updateDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NoteGroup entity, int offset) {
        entity.setNoteGroupId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGroupName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPriority(cursor.getInt(offset + 2));
        entity.setIsCollectValue(cursor.getInt(offset + 3));
        entity.setOrder(cursor.getInt(offset + 4));
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdateDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NoteGroup entity, long rowId) {
        return entity.getNoteGroupId();
    }
    
    @Override
    public String getKey(NoteGroup entity) {
        if(entity != null) {
            return entity.getNoteGroupId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NoteGroup entity) {
        return entity.getNoteGroupId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
